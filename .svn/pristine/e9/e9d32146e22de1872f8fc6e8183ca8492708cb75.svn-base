package com.aiait.eflow.wkf.action;


import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.aiait.eflow.common.CommonName;
import com.aiait.eflow.housekeeping.dao.OTRecordDAO;
import com.aiait.eflow.housekeeping.dao.StaffHolidayDAO;
import com.aiait.eflow.housekeeping.dao.SynchronizeEContractDAO;
import com.aiait.eflow.housekeeping.vo.*;
import com.aiait.eflow.wkf.util.WKAfterProccessTread;
import com.aiait.framework.db.DBManagerFactory;
import com.aiait.framework.db.IDBManager;
import com.aiait.framework.exception.DAOException;
import com.aiait.framework.mvc.action.ActionLocation;
import com.aiait.framework.mvc.action.DispatchAction;
import com.aiait.framework.mvc.action.ModuleMapping;

public class WKAfterProcessAction extends DispatchAction {

    public ActionLocation otherProcess(ModuleMapping mapping, HttpServletRequest request, HttpServletResponse response)
            throws Exception {
        String returnLabel = "tempsuccess";
        String requestNo = (String) request.getParameter("requestNo");
        String formSystemId = (String) request.getParameter("formSystemId");
        String saveType = (String) request.getParameter("saveType");
        String requestStaffCode = (String) request.getParameter(CommonName.SYSTEM_ID_REQUEST_STAFF_CODE);
        StaffVO currentStaff = (StaffVO) request.getSession().getAttribute(CommonName.CURRENT_STAFF_INFOR);
        String ccToStaffs = request.getParameter("ccStaffCode");
        String functionLabel = (String) request.getAttribute("functionLabel");
        if (functionLabel != null) {
            functionLabel = functionLabel.trim().toLowerCase();
        }
        // System.out.println("functionLabel: " + functionLabel);

        if ("balanceholiday".equals(functionLabel)) {
            balanceHoliday(request);
        }else if ("updateotrecord".equals(functionLabel)) {
        	updateOTRecord();
        }else if ("syncecontract".equals(functionLabel)) {
        	syncEContract(request);
        }else {
        	WKAfterProccessTread workTread = new WKAfterProccessTread(requestNo,currentStaff, returnLabel, formSystemId, functionLabel, requestStaffCode, ccToStaffs);
        	Thread t1 = new Thread(workTread);
        	t1.start();
        }

        // String requestNo = (String) request.getParameter("requestNo");
        // 设定处理完毕后需要显示的页面
        return mapping.findActionLocation(returnLabel);
        // request.setAttribute(CommonName.WINDOW_RETURN_TYPE,CommonName.WINDOW_RETURN_TYPE_PARENT);
        // request.setAttribute(CommonName.COMMON_OK_INFOR,"You processed form ("+requestNo+") successfully");
        // return mapping.findActionLocation(CommonName.SUCCESS_PAGE);
    }

	public boolean balanceHoliday(HttpServletRequest request) throws Exception {
        // 获取当前处理的form的流水号
        String requestNo = (String) request.getParameter("requestNo");
        IDBManager dbManager = null;
        try {
            dbManager = DBManagerFactory.getDBManager();
            StaffHolidayDAO holidayDao = new StaffHolidayDAO(dbManager);
            // 获取该form中所申请的请假记录
            LeaveRecordVO leaveVo = holidayDao.getLeaveRecord(requestNo);
            // 获取该form申请者所申请的假期类型的总假期天数
            StaffHolidayVO holidayVo = holidayDao
                    .getStaffHoliday(leaveVo.getRequestStaffCode(), leaveVo.getLeaveType());

            if (leaveVo == null)
                return false;
            double saveDays = 0;
            saveDays = leaveVo.getLeaveDays(); // 这张form中所申请的假期天数
            // 本年度所使用的天数将加上这次申请的天数
            saveDays = holidayVo.getUsedDays() + saveDays;
            holidayDao.balanceHolidays(leaveVo.getRequestStaffCode(), leaveVo.getLeaveType(), saveDays);
        } catch (DAOException e) {
            dbManager.freeConnection();
            e.printStackTrace();
            return false;
        } finally {
            if (dbManager != null)
                dbManager.freeConnection();
        }
        return true;
    }

    private boolean updateOTRecord() throws Exception {
        IDBManager dbManager = null;
        try {
            dbManager = DBManagerFactory.getDBManager();
            OTRecordDAO dao = new OTRecordDAO(dbManager);
            dao.updateOTRecordFromCheckSys();
        } catch (DAOException e) {
            dbManager.freeConnection();
            e.printStackTrace();
            return false;
        } finally {
            if (dbManager != null)
                dbManager.freeConnection();
        }
        return true;
	}
    
    private boolean syncEContract(HttpServletRequest request) throws Exception {
        // 获取当前处理的form的流水号
        String requestNo = (String) request.getParameter("requestNo");
        IDBManager dbManager = null;
        try {
            dbManager = DBManagerFactory.getDBManager();
            SynchronizeEContractDAO dao = new SynchronizeEContractDAO(dbManager);
            if("1".equals(request.getParameter("field_2_1"))){
            	dao.newContract(request.getParameter("request_no"));
            }else if("2".equals(request.getParameter("field_2_1"))){
            	dao.updateContract(request.getParameter("request_no"));
            }
        } catch (DAOException e) {
            dbManager.freeConnection();
            e.printStackTrace();
            return false;
        } finally {
            if (dbManager != null)
                dbManager.freeConnection();
        }
        return true;
	}
}
